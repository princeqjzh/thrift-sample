/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.testerhome.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2023-10-05")
public class ComputeResponse implements org.apache.thrift.TBase<ComputeResponse, ComputeResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ComputeResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComputeResponse");

  private static final org.apache.thrift.protocol.TField ERROR_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("errorNo", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMsg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPUTE_RET_FIELD_DESC = new org.apache.thrift.protocol.TField("computeRet", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComputeResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComputeResponseTupleSchemeFactory();

  public int errorNo; // required
  public @org.apache.thrift.annotation.Nullable String errorMsg; // optional
  public long computeRet; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ERROR_NO((short)1, "errorNo"),
    ERROR_MSG((short)2, "errorMsg"),
    COMPUTE_RET((short)3, "computeRet");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERROR_NO
          return ERROR_NO;
        case 2: // ERROR_MSG
          return ERROR_MSG;
        case 3: // COMPUTE_RET
          return COMPUTE_RET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ERRORNO_ISSET_ID = 0;
  private static final int __COMPUTERET_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ERROR_MSG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERROR_NO, new org.apache.thrift.meta_data.FieldMetaData("errorNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errorMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPUTE_RET, new org.apache.thrift.meta_data.FieldMetaData("computeRet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComputeResponse.class, metaDataMap);
  }

  public ComputeResponse() {
  }

  public ComputeResponse(
    int errorNo,
    long computeRet)
  {
    this();
    this.errorNo = errorNo;
    setErrorNoIsSet(true);
    this.computeRet = computeRet;
    setComputeRetIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComputeResponse(ComputeResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.errorNo = other.errorNo;
    if (other.isSetErrorMsg()) {
      this.errorMsg = other.errorMsg;
    }
    this.computeRet = other.computeRet;
  }

  @Override
  public ComputeResponse deepCopy() {
    return new ComputeResponse(this);
  }

  @Override
  public void clear() {
    setErrorNoIsSet(false);
    this.errorNo = 0;
    this.errorMsg = null;
    setComputeRetIsSet(false);
    this.computeRet = 0;
  }

  public int getErrorNo() {
    return this.errorNo;
  }

  public ComputeResponse setErrorNo(int errorNo) {
    this.errorNo = errorNo;
    setErrorNoIsSet(true);
    return this;
  }

  public void unsetErrorNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRORNO_ISSET_ID);
  }

  /** Returns true if field errorNo is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRORNO_ISSET_ID);
  }

  public void setErrorNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRORNO_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getErrorMsg() {
    return this.errorMsg;
  }

  public ComputeResponse setErrorMsg(@org.apache.thrift.annotation.Nullable String errorMsg) {
    this.errorMsg = errorMsg;
    return this;
  }

  public void unsetErrorMsg() {
    this.errorMsg = null;
  }

  /** Returns true if field errorMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMsg() {
    return this.errorMsg != null;
  }

  public void setErrorMsgIsSet(boolean value) {
    if (!value) {
      this.errorMsg = null;
    }
  }

  public long getComputeRet() {
    return this.computeRet;
  }

  public ComputeResponse setComputeRet(long computeRet) {
    this.computeRet = computeRet;
    setComputeRetIsSet(true);
    return this;
  }

  public void unsetComputeRet() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPUTERET_ISSET_ID);
  }

  /** Returns true if field computeRet is set (has been assigned a value) and false otherwise */
  public boolean isSetComputeRet() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPUTERET_ISSET_ID);
  }

  public void setComputeRetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPUTERET_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case ERROR_NO:
      if (value == null) {
        unsetErrorNo();
      } else {
        setErrorNo((Integer)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetErrorMsg();
      } else {
        setErrorMsg((String)value);
      }
      break;

    case COMPUTE_RET:
      if (value == null) {
        unsetComputeRet();
      } else {
        setComputeRet((Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERROR_NO:
      return getErrorNo();

    case ERROR_MSG:
      return getErrorMsg();

    case COMPUTE_RET:
      return getComputeRet();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERROR_NO:
      return isSetErrorNo();
    case ERROR_MSG:
      return isSetErrorMsg();
    case COMPUTE_RET:
      return isSetComputeRet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof ComputeResponse)
      return this.equals((ComputeResponse)that);
    return false;
  }

  public boolean equals(ComputeResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_errorNo = true;
    boolean that_present_errorNo = true;
    if (this_present_errorNo || that_present_errorNo) {
      if (!(this_present_errorNo && that_present_errorNo))
        return false;
      if (this.errorNo != that.errorNo)
        return false;
    }

    boolean this_present_errorMsg = true && this.isSetErrorMsg();
    boolean that_present_errorMsg = true && that.isSetErrorMsg();
    if (this_present_errorMsg || that_present_errorMsg) {
      if (!(this_present_errorMsg && that_present_errorMsg))
        return false;
      if (!this.errorMsg.equals(that.errorMsg))
        return false;
    }

    boolean this_present_computeRet = true;
    boolean that_present_computeRet = true;
    if (this_present_computeRet || that_present_computeRet) {
      if (!(this_present_computeRet && that_present_computeRet))
        return false;
      if (this.computeRet != that.computeRet)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + errorNo;

    hashCode = hashCode * 8191 + ((isSetErrorMsg()) ? 131071 : 524287);
    if (isSetErrorMsg())
      hashCode = hashCode * 8191 + errorMsg.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(computeRet);

    return hashCode;
  }

  @Override
  public int compareTo(ComputeResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetErrorNo(), other.isSetErrorNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorNo, other.errorNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetErrorMsg(), other.isSetErrorMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMsg, other.errorMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetComputeRet(), other.isSetComputeRet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComputeRet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeRet, other.computeRet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ComputeResponse(");
    boolean first = true;

    sb.append("errorNo:");
    sb.append(this.errorNo);
    first = false;
    if (isSetErrorMsg()) {
      if (!first) sb.append(", ");
      sb.append("errorMsg:");
      if (this.errorMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.errorMsg);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("computeRet:");
    sb.append(this.computeRet);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'errorNo' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'computeRet' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComputeResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ComputeResponseStandardScheme getScheme() {
      return new ComputeResponseStandardScheme();
    }
  }

  private static class ComputeResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<ComputeResponse> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ComputeResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERROR_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errorNo = iprot.readI32();
              struct.setErrorNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMsg = iprot.readString();
              struct.setErrorMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPUTE_RET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.computeRet = iprot.readI64();
              struct.setComputeRetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetErrorNo()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'errorNo' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetComputeRet()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeRet' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ComputeResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ERROR_NO_FIELD_DESC);
      oprot.writeI32(struct.errorNo);
      oprot.writeFieldEnd();
      if (struct.errorMsg != null) {
        if (struct.isSetErrorMsg()) {
          oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
          oprot.writeString(struct.errorMsg);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(COMPUTE_RET_FIELD_DESC);
      oprot.writeI64(struct.computeRet);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComputeResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ComputeResponseTupleScheme getScheme() {
      return new ComputeResponseTupleScheme();
    }
  }

  private static class ComputeResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<ComputeResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComputeResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.errorNo);
      oprot.writeI64(struct.computeRet);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetErrorMsg()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetErrorMsg()) {
        oprot.writeString(struct.errorMsg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComputeResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.errorNo = iprot.readI32();
      struct.setErrorNoIsSet(true);
      struct.computeRet = iprot.readI64();
      struct.setComputeRetIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.errorMsg = iprot.readString();
        struct.setErrorMsgIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

